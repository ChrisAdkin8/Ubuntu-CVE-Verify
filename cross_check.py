import argparse
import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy
import re

session = requests.Session()
def cve_resolution(cve, package_name):
    url = "https://ubuntu.com/security/cves?q=" + str(cve)
    
    try:
        response = session.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Failed to retrieve data for {cve}. Error: {e}")
        return f"{cve} not found in Ubuntu 22.04 database"

    if response.status_code == 200:
        soup = BeautifulSoup(response.content, "html.parser")
        table = soup.find("table")
        if type(table) is not type(None):
            data = []
            for row in table.find_all("tr")[1:]:  # Skip the header row
                columns = row.find_all("td")
                if ( columns[0].text.strip().startswith('CVE') ):
                    package     = columns[2].text.strip()
                    description = columns[7].text.strip()
                else:             
                    package = columns[0].text.strip()
                    description = columns[5].text.strip()
                data.append({"Package": package, "Description": description})
            
            df = pd.DataFrame(data)
            normalized_package_name = str(package_name).lower()
            for index, row in df.iterrows():
                normalized_row_0 = str(row[0]).lower()
                condition_1 = (
                    normalized_package_name.find(normalized_row_0) != -1
                    and len(normalized_package_name) > 5
                )
                condition_2 = not (
                    normalized_row_0 == 'linux'
                    and normalized_package_name.startswith('linux')
                    and len(normalized_package_name) > 5
                )
                if condition_1 and condition_2:
                    return str(row[0]) + ' ' + str(row[1])  
                
            return 'No match in Ubuntu 22.04 CVE database'                
        else:
            return 'No match in Ubuntu 22.04 CVE database'
    else:
        print(f"Failed to retrieve data. Status code: {response.status_code}")
        return cve + ' not found in Ubuntu 22.04 database'
def consolidate_vuln(row):
    cve_pattern = r'\bCVE-\d{4}-\d{4,7}\b'
    if str(row['Vuln']).startswith('CVE'):
        return row['Vuln']
    elif str(row['Vuln']).startswith('VULNDB') and 'CVE' in str(row['Nvd_Data']):
        return (re.search(cve_pattern, str(row['Nvd_Data']))).group(0)
    else:
        return ''
def main():
    parser = argparse.ArgumentParser(description='Script to produce a csv file based on a Sysdig csv cross referenced with the Ubuntu CVE database.')
    parser.add_argument('--input', '-i', type=str, help='CSV file containing the Sysdig image scan source data', default='./Consolidated_Dec-Sheet1.csv')
    parser.add_argument('--output', '-o', type=str, help='CSV file containing the Sysdig image scan source data cross referenced with the Ubuntu CVE database', default='./Ubuntu_2204_CVE_cf_Dec-Sheet1.csv')
    args = parser.parse_args()
    column_names = ['Feed', 'Feed_Group', 'Fix', 'Nvd_Data', 'Package', 'Package_Cpe', 'Package_Name', 'Package_Path', 'Package_Type', 'Severity', 'Url', 'Vendor_Data', 'Vuln', 'CVE' ]
    df = pd.read_csv(args.input, names=column_names, skiprows=1)
    df['CVE2'] = df.apply(consolidate_vuln, axis=1)
    for index, row in df.iterrows():
        df.at[index, 'Ubuntu_CVE_lookup'] = cve_resolution( row.CVE2, row.Package_Name )
    df_sorted = df.sort_values(by=['Severity', 'CVE2', 'Package_Name'])
    df_sorted.to_csv(args.output, index=False)
if __name__ == "__main__":
    main()